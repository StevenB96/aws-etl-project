AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  ProjectName:
    Type: String
    Default: "cloudform-etl-proj"
  Region:
    Type: String
    Default: "us-east-1"

Description: |
  AWS CloudFormation template for setting up users, access keys, and networking-related resources.

Resources:
  IAMUser:
    Type: "AWS::IAM::User"
    Properties:
      UserName: !Sub "${ProjectName}-user"
      Tags:
        - Key: "Name"
          Value: !Ref ProjectName

  IAMUserAccessKey:
    Type: "AWS::IAM::AccessKey"
    Properties:
      UserName: !Ref IAMUser
      Description: Access key for the IAM user.

  SecretManagerSecret:
    Type: "AWS::SecretsManager::Secret"
    Properties:
      Name: !Sub "${ProjectName}-user-access-key"
      SecretString: '{"AccessKeyId": !Ref IAMUserAccessKey, "SecretAccessKey": !GetAtt IAMUserAccessKey.SecretAccessKey}'
      Description: Secret containing IAM user's access key information.

  ElasticLoadBalancingRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-ElasticLoadBalancingRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "elasticloadbalancing.amazonaws.com"
            Action: "sts:AssumeRole"
      Description: "Allows ELB to call AWS services on your behalf."
      MaxSessionDuration: 3600

  DhcpOptions:
    Type: "AWS::EC2::DHCPOptions"
    Properties:
      DomainName: "ec2.internal"
      DomainNameServers: ["AmazonProvidedDNS"]

  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      CidrBlock: "172.31.0.0/16"
      Tags:
        - Key: "Name"
          Value: !Sub "${ProjectName}-vpc"
      InstanceTenancy: "default"

  VpcDhcpOptionsAssociation:
    Type: "AWS::EC2::VPCDHCPOptionsAssociation"
    Properties:
      DhcpOptionsId: !Ref DhcpOptions
      VpcId: !Ref VPC

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - Key: "Name"
          Value: !Sub "${ProjectName}-int-gw"

  AttachGateway:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  SubnetA:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: "us-east-1a"
      CidrBlock: "172.31.0.0/20"
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "Name"
          Value: !Sub "${ProjectName}-subnt-a"

  SubnetB:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: "us-east-1b"
      CidrBlock: "172.31.16.0/20"
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "Name"
          Value: !Sub "${ProjectName}-subnt-b"

  SubnetC:
    Type: "AWS::EC2::Subnet"
    Properties:
      AvailabilityZone: "us-east-1c"
      CidrBlock: "172.31.32.0/20"
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: false
      Tags:
        - Key: "Name"
          Value: !Sub "${ProjectName}-subnt-c"

  RouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${ProjectName}-rt-tbl"

  SubnetRouteTableAssociationA:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref SubnetA
      RouteTableId: !Ref RouteTable

  SubnetRouteTableAssociationB:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref SubnetB
      RouteTableId: !Ref RouteTable

  SubnetRouteTableAssociationC:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref SubnetC
      RouteTableId: !Ref RouteTable

  Route:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway

  SecurityGroup:
    Type: "AWS::EC2::SecurityGroup"
    Properties:
      GroupName: !Sub "${ProjectName}-sec-grp"
      VpcId: !Ref VPC
      GroupDescription: "Security group for the project"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"
      Tags:
        - Key: "Name"
          Value: !Sub "${ProjectName}-sec-grp"

  TargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      Name: !Sub "${ProjectName}-tgt-grp"
      Protocol: "HTTP"
      Port: 80
      VpcId: !Ref VPC
      HealthCheckProtocol: "HTTP"
      HealthCheckPort: "traffic-port"
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2
      HealthCheckPath: "/"
      Matcher:
        HttpCode: "200"

  LoadBalancer:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Name: !Sub "${ProjectName}-ld-blncr"
      Subnets:
        - !Ref SubnetA
        - !Ref SubnetB
        - !Ref SubnetC
      Scheme: "internet-facing"
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "60"
      SecurityGroups:
        - !Ref SecurityGroup
      Tags:
        - Key: "Name"
          Value: !Sub "${ProjectName}-ld-blncr"
      Role: !GetAtt ElasticLoadBalancingRole.Arn
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref TargetGroup

  Listeners:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  NetworkACL:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: "Name"
          Value: !Sub "${ProjectName}-net-acl"

  NetworkACLEntry1:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref NetworkACL
      RuleNumber: 100
      Protocol: "-1"
      RuleAction: "allow"
      Egress: true
      CidrBlock: "0.0.0.0/0"

  NetworkACLEntry2:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref NetworkACL
      RuleNumber: 100
      Protocol: "-1"
      RuleAction: "allow"
      Egress: false
      CidrBlock: "0.0.0.0/0"

  ECSServiceRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${ProjectName}-ECSServiceRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ecs.amazonaws.com"
            Action: "sts:AssumeRole"
      Description: "Role for ECS Service"
      MaxSessionDuration: 3600

  ECSTaskExecutionRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${ProjectName}-ECSTaskExecutionRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ecs-tasks.amazonaws.com"
            Action: "sts:AssumeRole"
      Description: "Role for ECS Task Execution"
      MaxSessionDuration: 3600
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy"
        - "arn:aws:iam::aws:policy/AmazonS3FullAccess"

  AutoScalingRole:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub "${ProjectName}-AutoScalingRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ecs.application-autoscaling.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      MaxSessionDuration: 3600
      Description: >
        IAM Role for AWS Application Auto Scaling with ECS. 
        Allows ECS Application Auto Scaling service to perform actions on ECS services and CloudWatch alarms.

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${ProjectName}-ecs-clstr"

  ECRContainerRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Sub "${ProjectName}-cont-repo"
      EncryptionConfiguration:
        EncryptionType: "AES256"
      ImageScanningConfiguration:
        ScanOnPush: false

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: ECRContainerRepository
    Properties:
      Family: !Sub "${ProjectName}-tsk-def"
      NetworkMode: "awsvpc"
      Cpu: 1024
      Memory: 3072
      RequiresCompatibilities:
        - "EC2"
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSServiceRole.Arn
      ContainerDefinitions:
        - Name: !Sub "${ProjectName}-cont"
          Image: !Ref ECRContainerRepository
          Essential: true
          PortMappings:
            - ContainerPort: 80
              HostPort: 80
              Protocol: "tcp"
      TaskPlacement:
        Strategies:
          - Type: "Spread"
            Field: "attribute:ecs.availability-zone"
          - Type: "Spread"
            Field: "instanceId"

  ECSService:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: !Sub "${ProjectName}-srvc"
      TaskDefinition: !Ref ECSTaskDefinition
      LaunchType: "EC2"
      DesiredCount: 1
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 100
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref SubnetA
            - !Ref SubnetB
            - !Ref SubnetC
          SecurityGroups:
            - !Ref SecurityGroup
      LoadBalancers:
        - TargetGroupArn: !Ref TargetGroup
          ContainerName: "project-container"
          ContainerPort: 80
      HealthCheckGracePeriodSeconds: 0

  ECSScalableTarget:
    Type: "AWS::ApplicationAutoScaling::ScalableTarget"
    Properties:
      MaxCapacity: 1
      MinCapacity: 0
      ResourceId: !Sub "service/${ECSService}/resource"
      ScalableDimension: "ecs:service:DesiredCount"
      ServiceNamespace: "ecs"
      RoleARN: !GetAtt "AutoScalingRole.Arn"

  ECSScalingPolicy:
    Type: "AWS::ApplicationAutoScaling::ScalingPolicy"
    Properties:
      PolicyName: !Sub "${ProjectName}-scl-pol"
      Description: "Auto Scaling policy for the project"
      ScalingTargetId: !Ref ECSScalableTarget
      PolicyType: "TargetTrackingScaling"
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        PredefinedMetricSpecification:
          PredefinedMetricType: "ECSServiceAverageCPUUtilization"

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-CodePipelineServiceRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      MaxSessionDuration: 3600
      Policies:
        - PolicyName: !Sub ${ProjectName}-CodePipelineServicePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - iam:PassRole
                Resource: "*"
                Effect: Allow
                Condition:
                  StringEqualsIfExists:
                    iam:PassedToService:
                      - "cloudformation.amazonaws.com"
                      - "elasticbeanstalk.amazonaws.com"
                      - "ec2.amazonaws.com"
                      - "ecs-tasks.amazonaws.com"
              - Action:
                  - codecommit:CancelUploadArchive
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:GetRepository
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:UploadArchive
                Resource: "*"
                Effect: Allow
              - Action:
                  - codedeploy:CreateDeployment
                  - codedeploy:GetApplication
                  - codedeploy:GetApplicationRevision
                  - codedeploy:GetDeployment
                  - codedeploy:GetDeploymentConfig
                  - codedeploy:RegisterApplicationRevision
                Resource: "*"
                Effect: Allow
              - Action:
                  - codestar-connections:UseConnection
                Resource: "*"
                Effect: Allow
              - Action:
                  - elasticbeanstalk:*
                  - ec2:*
                  - elasticloadbalancing:*
                  - autoscaling:*
                  - cloudwatch:*
                  - s3:*
                  - sns:*
                  - cloudformation:*
                  - rds:*
                  - sqs:*
                  - ecs:*
                Resource: "*"
                Effect: Allow
              - Action:
                  - lambda:InvokeFunction
                  - lambda:ListFunctions
                Resource: "*"
                Effect: Allow
              - Action:
                  - opsworks:CreateDeployment
                  - opsworks:DescribeApps
                  - opsworks:DescribeCommands
                  - opsworks:DescribeDeployments
                  - opsworks:DescribeInstances
                  - opsworks:DescribeStacks
                  - opsworks:UpdateApp
                  - opsworks:UpdateStack
                Resource: "*"
                Effect: Allow
              - Action:
                  - cloudformation:CreateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - cloudformation:UpdateStack
                  - cloudformation:CreateChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:SetStackPolicy
                  - cloudformation:ValidateTemplate
                Resource: "*"
                Effect: Allow
              - Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuildBatches
                  - codebuild:StartBuildBatch
                Resource: "*"
                Effect: Allow
              - Action:
                  - devicefarm:ListProjects
                  - devicefarm:ListDevicePools
                  - devicefarm:GetRun
                  - devicefarm:GetUpload
                  - devicefarm:CreateUpload
                  - devicefarm:ScheduleRun
                Resource: "*"
                Effect: Allow
              - Action:
                  - servicecatalog:ListProvisioningArtifacts
                  - servicecatalog:CreateProvisioningArtifact
                  - servicecatalog:DescribeProvisioningArtifact
                  - servicecatalog:DeleteProvisioningArtifact
                  - servicecatalog:UpdateProduct
                Resource: "*"
                Effect: Allow
              - Action:
                  - cloudformation:ValidateTemplate
                Resource: "*"
                Effect: Allow
              - Action:
                  - ecr:DescribeImages
                Resource: "*"
                Effect: Allow
              - Action:
                  - states:DescribeExecution
                  - states:DescribeStateMachine
                  - states:StartExecution
                Resource: "*"
                Effect: Allow
              - Action:
                  - appconfig:StartDeployment
                  - appconfig:StopDeployment
                  - appconfig:GetDeployment
                Resource: "*"
                Effect: Allow
              - Action:
                  - codepipeline:StartPipelineExecution
                  - codepipeline:StopPipelineExecution
                  - codepipeline:GetPipeline
                  - codepipeline:GetPipelineExecution
                  - codepipeline:GetPipelineState
                  - codepipeline:GetThirdPartyJobDetails
                  - codepipeline:PollForJobs
                  - codepipeline:AcknowledgeJob
                  - codepipeline:PutJobFailureResult
                  - codepipeline:PutJobSuccessResult
                Resource: "*"
                Effect: Allow

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-CodeBuildServiceRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      MaxSessionDuration: 3600
      Policies:
        - PolicyName: !Sub ${ProjectName}-CodeBuildServicePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - ds:CreateComputer
                  - ds:DescribeDirectories
                  - ec2:DescribeInstanceStatus
                  - logs:*
                  - ssm:*
                  - ec2messages:*
                Resource: "*"
              - Effect: Allow
                Action: iam:CreateServiceLinkedRole
                Resource: "arn:aws:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM*"
                Condition:
                  StringLike:
                    iam:AWSServiceName: "ssm.amazonaws.com"
              - Effect: Allow
                Action:
                  - iam:DeleteServiceLinkedRole
                  - iam:GetServiceLinkedRoleDeletionStatus
                Resource: "arn:aws:iam::*:role/aws-service-role/ssm.amazonaws.com/AWSServiceRoleForAmazonSSM*"
              - Effect: Allow
                Action:
                  - ssmmessages:CreateControlChannel
                  - ssmmessages:CreateDataChannel
                  - ssmmessages:OpenControlChannel
                  - ssmmessages:OpenDataChannel
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - "arn:aws:logs:us-east-1:690469543125:log-group:/aws/codebuild/etl-project-build-project"
                  - "arn:aws:logs:us-east-1:690469543125:log-group:/aws/codebuild/etl-project-build-project:*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketAcl
                  - s3:GetBucketLocation
                Resource:
                  - "arn:aws:s3:::codepipeline-us-east-1-*"
              - Effect: Allow
                Action:
                  - codebuild:CreateReportGroup
                  - codebuild:CreateReport
                  - codebuild:UpdateReport
                  - codebuild:BatchPutTestCases
                  - codebuild:BatchPutCodeCoverages
                Resource:
                  - "arn:aws:codebuild:us-east-1:690469543125:report-group/etl-project-build-project-*"
              - Effect: Allow
                Action:
                  - ssm:GetParameters
                Resource: "arn:aws:ssm:us-east-1:690469543125:parameter/CodeBuild/*"
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - "arn:aws:secretsmanager:us-east-1:690469543125:secret:/CodeBuild/*"
              - Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeDhcpOptions
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeVpcs
                  - ec2:CreateNetworkInterfacePermission
                Resource: "*"
                Condition:
                  StringEquals:
                    ec2:Subnet:
                      - "arn:aws:ec2:us-east-1:690469543125:subnet/subnet-02b7a2d2ecab5339b"
                      - "arn:aws:ec2:us-east-1:690469543125:subnet/subnet-0fe6a84c44c822ba9"
                      - "arn:aws:ec2:us-east-1:690469543125:subnet/subnet-07e8423f759dc7984"
                    ec2:AuthorizedService: "codebuild.amazonaws.com"
              - Effect: Allow
                Action:
                  - secretsmanager:*
                  - cloudformation:CreateChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:DescribeStackResource
                  - cloudformation:DescribeStacks
                  - cloudformation:ExecuteChangeSet
                  - docdb-elastic:GetCluster
                  - docdb-elastic:ListClusters
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeSubnets
                  - ec2:DescribeVpcs
                  - kms:DescribeKey
                  - kms:ListAliases
                  - kms:ListKeys
                  - lambda:ListFunctions
                  - rds:DescribeDBClusters
                  - rds:DescribeDBInstances
                  - redshift:DescribeClusters
                  - tag:GetResources
                Resource: "*"
              - Effect: Allow
                Action:
                  - lambda:AddPermission
                  - lambda:CreateFunction
                  - lambda:GetFunction
                  - lambda:InvokeFunction
                  - lambda:UpdateFunctionConfiguration
                Resource: "arn:aws:lambda:*:*:function:SecretsManager*"
              - Effect: Allow
                Action:
                  - serverlessrepo:CreateCloudFormationChangeSet
                  - serverlessrepo:GetApplication
                Resource: "arn:aws:serverlessrepo:*:*:applications/SecretsManager*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - "arn:aws:s3:::awsserverlessrepo-changesets*"
                  - "arn:aws:s3:::secrets-manager-rotation-apps-*/*"

  CodeDeployServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${ProjectName}-CodeDeployServiceRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      MaxSessionDuration: 3600
      Description: >
        Allows CodeDeploy to read S3 objects, invoke Lambda functions,
        publish to SNS topics, and update ECS services on your behalf.
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS"

  BuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub "${ProjectName}-bld-prj"
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
        Name: !Sub "${ProjectName}-bld-prj"
        Packaging: NONE
        EncryptionDisabled: false
      Environment:
        Type: LINUX_CONTAINER
        Image: aws/codebuild/amazonlinux2-x86_64-standard:4.0
        ComputeType: BUILD_GENERAL1_SMALL
        PrivilegedMode: true
        ImagePullCredentialsType: CODEBUILD
      Source:
        Type: CODEPIPELINE
        InsecureSsl: false
      TimeoutInMinutes: 60
      QueuedTimeoutInMinutes: 480
      EncryptionKey: !Sub "arn:aws:kms:${Region}:690469543125:alias/aws/s3"
      Tags: []
      LogsConfig:
        CloudWatchLogs:
          Status: ENABLED
        S3Logs:
          Status: DISABLED
          EncryptionDisabled: false

  Application:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: !Sub "${ProjectName}-app"
      ComputePlatform: Lambda

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub "${ProjectName}-pln"
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Sub "codepipeline-${Region}-459445715306"
      Stages:
        - Name: Source
          Actions:
            - Name: !Sub ${ProjectName}-source
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection
                Version: "1"
              RunOrder: 1
              Configuration:
                BranchName: master
                ConnectionArn: !Sub "arn:aws:codestar-connections:${Region}:690469543125:connection/dd762c88-4f7b-46a4-adc5-08e609a4f75a"
                FullRepositoryId: StevenB96/aws_etl_project
                OutputArtifactFormat: CODE_ZIP
              OutputArtifacts:
                - Name: SourceArtifact
              Region: !Sub ${Region}
              Namespace: SourceVariables
        - Name: Approval
          Actions:
            - Name: !Sub ${ProjectName}-approval
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: "1"
              RunOrder: 1
              Configuration: {}
              Region: !Sub ${Region}
        - Name: Build
          Actions:
            - Name: !Sub ${ProjectName}-build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: "1"
              RunOrder: 1
              Configuration:
                ProjectName: !Ref BuildProject
              OutputArtifacts:
                - Name: BuildArtifact
              InputArtifacts:
                - Name: SourceArtifact
              Region: !Sub "${Region}"
              Namespace: BuildVariables
        - Name: Deploy
          Actions:
            - Name: !Sub ${ProjectName}-deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: "1"
              RunOrder: 1
              Configuration:
                ApplicationName: !Ref Application
                DeploymentGroupName: !Sub "${ProjectName}-dpl-grp"
              InputArtifacts:
                - Name: BuildArtifact
              Region: !Ref Region
              Namespace: DeployVariables
      PipelineType: V2

  DataProcessedBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "${ProjectName}-data-processed"
      VersioningConfiguration:
        Status: "Suspended"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"

  DataRawBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "${ProjectName}-data-raw"
      VersioningConfiguration:
        Status: "Suspended"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"

  MLModelBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "${ProjectName}-ml-model"
      VersioningConfiguration:
        Status: "Suspended"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"

  UploadsBucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Sub "${ProjectName}-uploads"
      VersioningConfiguration:
        Status: "Suspended"
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: "AES256"

Outputs:
  AccessKeyOutput:
    Description: "Access Key for the IAM user."
    Value: !Ref IAMUserAccessKey
